#!/usr/bin/env python3
# pylint: disable=invalid-name
"""Drop-in replacement for gnome-terminal that spawns your preferred terminal
"""
import argparse as ap
import os
import pty
import shlex
import shutil
import sys
from typing import List


def main() -> int:
    """Fork a PTY and execute the preferred terminal emulator
    """
    try:
        term = os.path.realpath(shutil.which('x-terminal-emulator'))
    except TypeError:
        return 127
    else:
        return fork([term, *parse_cmd()]) < 1


def parse_cmd() -> List[str]:
    """Parse command line arguments and return a command ready for execution
    """
    parser = ap.ArgumentParser(os.path.basename(sys.argv[0]))
    parser.add_argument('-e', '--command', dest='cmd', nargs=ap.REMAINDER)
    parser.add_argument('-x', '--execute', dest='cmd', nargs=ap.REMAINDER)
    parser.add_argument('--', dest='cmd', nargs=ap.REMAINDER)
    args, _ = parser.parse_known_args()
    return [] if args.cmd is None else ['-e', *map(shlex.quote, args.cmd)]


def fork(cmd: List[str]) -> int:
    """Fork a child process to fork a child process attached to a PTY
    """
    surrogate_pid = os.fork()
    if surrogate_pid == 0:
        sys.exit(fork_pty(cmd) < 1)
    return surrogate_pid


def fork_pty(cmd: List[str]) -> int:
    """Fork a child process on a PTY that replaces itself with a terminal
    """
    child_pid, _ = pty.fork()
    if child_pid == 0:
        os.execvp(cmd[0], cmd)
    return child_pid


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(130)
