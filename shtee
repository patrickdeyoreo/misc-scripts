#!/usr/bin/env sh

# A posix-friendly tee hack for emulating process substitution.
# Passes input from stdin to each of the commands given as arguments.
# usage: shtee [command] ...



# Initialize variables, set traps, and make an empty directory
init_env() {

    # Save shell options and set 'errexit'
    local -
    set -e

    # Clear the variables we're going to use
    unset -v workdir
    unset -v id_fmt
    unset -v index

    # Set a trap to remove our files upon exit
    trap 'rm -rf "${workdir}"' EXIT

    # Make an empty directory to hold our files
    workdir="$(mktemp -d --tmpdir "$$-XXXXXXXX")"

    # Define file ID format for proper sorting
    id_fmt="%0${##}d"

    # Initialize a counter to iterate over args
    index=0
}



# Create necessary pipes and start the respective  commands
prepare_pipes() {

  # Make a pipe to avoid extra subshells
  mkfifo "${workdir}/@"

  # Start each command provided as an argument
  while test "${index}" -lt "$#"; do
  
      # Generate file id based on current argument index
      printf "${id_fmt}\n" $((index + 1)) &
  
      # Read incremented index (formatted id)
      read -r index
  
      # Make a pipe for the command currently being processed
      if mkfifo "${workdir}/-${index}"; then

        # Start the command in a subshell reading from its pipe
        ( eval 'eval "${'"${index}"'}"' 0< "${workdir}/-${index}" 1> "${workdir}/+${index}" ) &
      fi

  done 3<> "${workdir}/@" 0<&3 1>&3
}



# Evaluate each command with the input available on stdin
eval_commands() {

  # tee stdin to our pipes and wait for the jobs to finish
  tee "${workdir}"/-* 1> /dev/null
  wait

  # Print all captured output
  cat "${workdir}"/+*
}



# Put it all together
main() {
  if test "$#" -ne 0; then
    init_env "$@"
    prepare_pipes "$@"
    eval_commands "$@"
  fi
}



# Run it.
main "$@"


# Done
exit 0
