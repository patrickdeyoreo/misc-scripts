#!/usr/bin/env bash
#
# create and display simple notes
######################################


######################################
# Print a message to standard output
# Usage:
#   msg [CONTEXT ...] MESSAGE
# Globals:
#   None
# Arguments:
#   CONTEXT: program(s), function(s), or value(s) to prepend
#   MESSAGE: message to print
# Return:
#   exit status of the previous command
######################################
msg()
{
    # shellcheck disable=SC2064
    trap "$(
    printf "%s\nreturn $?" "$(
    : "$(trap -p RETURN)"
    printf '%s' "${_:-trap RETURN}"
    )"
    )" RETURN
    if (( $# > 0 ))
    then
        if (( $# > 1 ))
        then
            printf '%s: ' "${@:1:($# - 1)}"
        fi
        printf '%s\n' "${!#}"
    fi 1>&2
}


######################################
# Print a message to standard error
# Usage:
#   errmsg [CONTEXT ...] MESSAGE
# Globals:
#   None
# Arguments:
#   CONTEXT: program(s), function(s), or value(s) to prepend
#   MESSAGE: message to print
# Return:
#   exit status of the previous command
######################################
errmsg()
{
    msg "$@" 1>&2
}


#######################################
# Assign a value to a variable by reference
# Usage:
#   assign_by_ref NAME [VALUE]
# Globals:
#   BASH_REMATCH
# Arguments:
#   NAME: variable name
#   VALUE: value to assign
# Return:
#   1 if given an invalid identifier or a bad array subscript,
#   2 if given the wrong number of arguments,
#   0 otherwise
#######################################
assign_by_ref()
{
  if (( $# < 2 ))
  then
    msg::err "${FUNCNAME[0]}" 'usage' "${FUNCNAME[0]} name value ..."
    return 2
  fi
  if [[ $1 =~ ^([[:alpha:]_][[:alnum:]_]*)(\[(.*)])?$ ]]
  then
    if [[ -z ${BASH_REMATCH[2]} ]]
    then
      if (( $# > 2 ))
      then
        eval "$1"'=("${@:2}")'
      else
        eval "$1"'=$2'
      fi
    elif [[ ${!BASH_REMATCH[1]@a} == *A* ]]
    then
      if (( $# > 2 ))
      then
        eval "${BASH_REMATCH[1]}[${BASH_REMATCH[3]@Q}]"'=("${@:2}")'
      else
        eval "${BASH_REMATCH[1]}[${BASH_REMATCH[3]@Q}]"'=$2'
      fi
    elif (( $((BASH_REMATCH[3])), 1 )) 2>/dev/null
    then
      if (( $# > 2 ))
      then
        eval "${BASH_REMATCH[1]}[$((BASH_REMATCH[3]))]"'=("${@:2}")'
      else
        eval "${BASH_REMATCH[1]}[$((BASH_REMATCH[3]))]"'=$2'
      fi
    else
      msg::err "${FUNCNAME[0]}" "${BASH_REMATCH[0]}" 'bad array subscript'
    fi
  else
    msg::err "${FUNCNAME[0]}" "$1" 'not a valid identifier'
  fi
}


######################################
# Assign options and arguments to an associative array by reference
# Usage:
#   getopts_by_ref NAME OPTSTRING [ARG ...]
# Globals:
#   OPTIND
#   OPTARG
# Arguments:
#   NAME: an initialized associative array
#   OPTSTRING: the option letters to be recognized
#   ARG: argument(s) to parse
# Return:
#    2 if an invalid option is found or an option is missing an argument,
#    1 if NAME is an invalid identifier,
#    0 if option parsing succeeds,
#    else non-zero
######################################
getopts_by_ref()
{
    local opt || return

    while getopts "$2" opt "${@:3}"
    do
        case "${opt}" in
            \?) errmsg "${0##*/}" "-${OPTARG}" 'invalid option'
                return 2
                ;;
            : ) errmsg "${0##*/}" "-${OPTARG}" 'option requires an argument'
                return 2
                ;;
            * ) assign_by_ref "$1[${opt}]" "${OPTARG}"
                ;;
        esac
    done
}


######################################
# List notes
# Usage:
#   list
# Globals:
#   NOTE_TIME_FMT
#   NOTES
# Arguments:
#   None
# Return:
#   1 if note(s) cannot be accessed
#   else 0
######################################
note::list()
{
    local count="${#NOTES[@]}"

    for _ in "${!NOTES[@]}"
    do
        printf '(%0'"${#count}"'d) %s\n' "$_" "$(
        date -d "${NOTES[_]##*/}" "+${NOTE_TIME_FMT}"
        )"
    done
}


######################################
# Create a note
# Usage:
#   new
# Globals:
#   NOTE_DIR
#   NOTE_NAME_FMT
# Arguments:
#   None
# Return:
#   1 if note cannot be created
#   else 0
######################################
note::new()
{
    local -
    set -o noclobber

    local temp && temp="$(mktemp --tmpdir "${0##*/}-XXX")" || return 1

    trap -- "$(
    : "$(trap -p RETURN)"
    printf '%s\n' "${_:-trap RETURN}"
    : "$(trap -p EXIT)"
    printf '%s\n' "${_:-trap EXIT}"
    )"$'\nrm -rf "${temp}"' RETURN
    trap 'rm -rf "${temp}"' EXIT

    cat 1>|"${temp}"

    while ! cat "${temp}" 1>"${NOTE_DIR}/$(printf "%(${NOTE_NAME_FMT})T")"
    do
        if ! [[ -d ${NOTE_DIR} ]]
        then
            errmsg "${0##*/}" "${NOTE_DIR}" 'No such directory'
            return 1
        fi
        if ! [[ -r ${NOTE_DIR} && -w ${NOTE_DIR} && -x ${NOTE_DIR} ]]
        then
            errmsg "${0##*/}" "${NOTE_DIR}" 'Permission denied'
            return 1
        fi
    done 1>&2 2>/dev/null
}


######################################
# Print notes
# Usage:
#   print
# Globals:
#   NOTES
#   NOTE_TIME_FMT
# Arguments:
#   None
# Return:
#   1 if note(s) cannot be accessed
#   else 0
######################################
note::print()
{
    local count="${#NOTES[@]}"

    for _ in "${!NOTES[@]}"; do
        printf '(%0'"${#count}"'d) %s\n%s\n%s' "$_" "$(
        date -d "${NOTES[_]##*/}" "+${NOTE_TIME_FMT}"
        )" "$(< "${NOTES[_]}")" "${NOTES[_ + 1]//?*/$'\n'}"
    done
}


######################################
# remove - remove a note
#
# usage: remove
######################################
note::remove()
{
    printf 'sorry, this is not implemented yet\n'
}


######################################
# search - search for a note
#
# usage: search
######################################
note::search()
{
    printf 'sorry, this is not implemented yet\n'
}


######################################
# usage - print a short usage synopsis
#
# usage: usage
######################################
note::help()
{
    printf 'usage: %s [(C)lear|(L)ist|(N)ew|(P)rint|(R)emove|(S)earch]\n' "${0##*/}"
}


######################################
# wipe - delete all notes
#
# usage: remove
######################################
note::clear()
{
    local REPLY;

    read -r -p "Permanently erase all notes? [Y/n] " REPLY

    case "${REPLY^^}" in
        Y*) rm -rf "${NOTES[@]}" && echo Notes erased.
            ;;
        * ) echo Aborting...
            ;;
    esac
}


NOTE_COMMANDS=( 'clear' 'list' 'new' 'print' 'remove' 'search' )

NOTE_DIR="${NOTE_DIR:-${XDG_DATA_HOME:-${HOME}/.local/share}/note}"

NOTE_NAME_FMT='%FT%T'

NOTE_TIME_FMT="${NOTE_TIME_FMT:-%a %_d %b %Y %_I:%M %p}"

if [[ -d ${NOTE_DIR} ]]
then
    shopt -s nullglob
    NOTES=( "${NOTE_DIR}"/* )
    shopt -u nullglob
else
    NOTES=( )
    mkdir -m 0700 -p -- "${NOTE_DIR}" || exit
fi

if (( $# ))
then
    for _ in "${NOTE_COMMANDS[@]}"
    do
        if [[ $_ == "${1,,}"* ]]
        then
            note::"$_" "${@:2}"
            exit
        fi
    done
    errmsg "${0##*/}" "$1" 'invalid command'
fi

note::help 1>&2

exit 2
